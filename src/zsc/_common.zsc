class PowerupCommon : CustomInventory
{
    class<Inventory> ReplacementClass;
    private SimpleInventoryItems handler;
    private UseLastHandler lastHandler;
    String FakePickupMessage;

    Default
    {
        -COUNTITEM;
        +DONTGIB
        +INVENTORY.ALWAYSPICKUP;
        +INVENTORY.PERSISTENTPOWER;
        +INVENTORY.INVBAR;
        +INVENTORY.HUBPOWER;
        Inventory.InterHubAmount 99;
        Inventory.MaxAmount 99;
        Inventory.Amount 1;
    }
    
    void UseRealItem()
    {
        handler = SimpleInventoryItems(EventHandler.Find("SimpleInventoryItems"));
        handler.IgnoreNext = true;
        owner.GiveInventory(ReplacementClass,1);
        //owner.TakeInventory(self.GetClass(),1);
        //Destroy();
    }
    
    override String PickupMessage ()
	{
		return FakePickupMessage;
	}
	
	override void AttachToOwner(Actor other)
    {
        super.AttachToOwner(other);
        lastHandler = UseLastHandler(EventHandler.Find("UseLastHandler"));
        lastHandler.AddItem(self);
    }
    
    override bool HandlePickup(Inventory item)
    {
        let handled = super.HandlePickup(item);
        
        if (handled)
        {
            lastHandler = UseLastHandler(EventHandler.Find("UseLastHandler"));
            lastHandler.AddItem(self);
        }
        return handled;
    }
	
	protected void SpawnAdditionalItem(String item, int x, int y)
	{       
        Class<Actor> cls = item;
        if (cls)
        {
            A_SpawnItem(item,x,y);
        }
	}
    
    States
    {
        Spawn:
            TNT1 A 0;
            Stop;
        Use:
            TNT1 A 0
            {
                invoker.UseRealItem();
            }
            Stop;
    }
}

class HealthPowerup : PowerupCommon
{
    private bool checked;
    
    //the first frame where we get an owner, check if we are able to be used
    void CheckHealth(Actor other)
    {
        if (!checked)
        {
            if (other.health <= inventory_checkhealth_amount)
                UseRealItem();
            checked = true;
        }
    }
    
    override void AttachToOwner(Actor other)
    {
        CheckHealth(other);
        super.AttachToOwner(other);
    }
    
    override bool HandlePickup(Inventory item)
    {
        CheckHealth(owner);
        return super.HandlePickup(item);
    }
}
